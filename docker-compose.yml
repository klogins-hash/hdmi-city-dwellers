version: '3.8'

networks:
  weaviate-net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: weaviate0

services:
  # Weaviate Vector Database - Official Latest Stable
  weaviate:
    image: semitechnologies/weaviate:1.23.1
    ports:
      - "8080:8080"
      - "50051:50051"  # gRPC
    networks:
      - weaviate-net
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'false'
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: '${WEAVIATE_API_KEY}'
      AUTHENTICATION_APIKEY_USERS: 'admin'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      ENABLE_MODULES: 'text2vec-openai,generative-openai'
      CLUSTER_HOSTNAME: 'node1'
      OPENAI_APIKEY: '${OPENAI_API_KEY}'
      
      # Performance optimizations
      GOMAXPROCS: '2'
      GOMEMLIMIT: '2GiB'
      LOG_LEVEL: 'info'
      
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache - Official Alpine Latest
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    networks:
      - weaviate-net
    command: >
      redis-server 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
      --tcp-keepalive 300
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # FastAPI Backend - Official Python Slim
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - weaviate-net
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      weaviate:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # React Frontend - Official Node Alpine
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - weaviate-net
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules  # Anonymous volume for node_modules
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  weaviate_data:
    driver: local
  redis_data:
    driver: local
